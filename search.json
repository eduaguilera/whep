[{"path":"https://eduaguilera.github.io/whep/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 whep authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://eduaguilera.github.io/whep/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Catalin Covaci. Author, maintainer. Eduardo Aguilera. Author, copyright holder. João Serra. Contributor. . Funder.","code":""},{"path":"https://eduaguilera.github.io/whep/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Covaci C, Aguilera E (2025). whep: Processing Agro-Environmental Data. R package version 0.2.0.9000, https://eduaguilera.github.io/whep/.","code":"@Manual{,   title = {whep: Processing Agro-Environmental Data},   author = {Catalin Covaci and Eduardo Aguilera},   year = {2025},   note = {R package version 0.2.0.9000},   url = {https://eduaguilera.github.io/whep/}, }"},{"path":[]},{"path":"https://eduaguilera.github.io/whep/copilot-instructions.html","id":"workflow-and-style","dir":"","previous_headings":"","what":"Workflow and Style","title":"GitHub Copilot Instructions for WHEP Package","text":"Follow workflow: https://lbm364dl.github.io/follow--workflow/ Follow tidyverse style guide: https://style.tidyverse.org/ documentation section functions, ensure tags exist: @description, @param (function parameter), @return, @export, @examples Maximum line width 80 characters must one space #' start text annotation line, next lines indented two spaces easily know ’s section Finish doc sentences full stop Use snake_case column namings Always make sure rules document lintrs passed change code","code":""},{"path":"https://eduaguilera.github.io/whep/copilot-instructions.html","id":"tests","dir":"","previous_headings":"","what":"Tests","title":"GitHub Copilot Instructions for WHEP Package","text":"functions set tests, made testthat package Tests located script (one per script R folder) tests/testthat, named following convention: \"test_scriptname.R\" Tests meaningful set tests, designed test functionality edge cases. Avoid unnecessary tests Make sample tibbles tibble::tribble() Pipes pass datasets functions dplyr::pull() extract vectors dataframes test grouping behaviour, filter group followed group values test Use pointblank functions test behaviour much possible (e.g. expect_col_exists(), expect_col_vals_in_set(), expect_col_vals_not_null(), expect_col_vals_equal()) Take test_gapfilling.R example make tests Make helper fixtures contribute reduce amount code tests files","code":""},{"path":[]},{"path":[]},{"path":"https://eduaguilera.github.io/whep/index.html","id":"who-has-eaten-the-planet-the-paths-of-food-systems-beyond-the-safe-and-just-operating-space-1850-2020","dir":"","previous_headings":"Project","what":"Who Has Eaten the Planet? The paths of food systems beyond the safe and just operating space (1850-2020)","title":"Processing Agro-Environmental Data","text":"Food production covers basic human need, simultaneously main driver anthropogenic environmental impacts. impacts resulted transgression, brief period since industrial revolution, planetary boundaries defining safe operating space humanity. rich research literature quantifies last 60 years’ fast, heterogeneous, often unfair development food supply related environmental impacts, depend agro-climatic factors, technology, trade flows, greatly changed different trajectories around world. However, developments lack integrated approach, poorly quantified 1961. WHEP bridge knowledge gaps, assessing “eaten planet” answering questions: environmental impacts food production since 1850? role trade food supply displacing responsibilities impacts? impacts related planetary boundaries, food supply inequality? highly ambitious goals addressed four objectives: Constructing consolidated global country-level annual database agricultural production management, using massive data collation combination modeling. Estimating environmental impacts: greenhouse gas emissions carbon, land, water, nitrogen, phosphorus spatially explicit, integrated, dynamic modeling. Calculating product footprints tracing along international trade chains. Analyzing observed trajectories safe just operating space, assessing drivers, impacts production consumption levels related fair healthy supply. ground-breaking research shed new light environmental history food, opening many new research frontiers, providing necessary information design fair sustainable policies. can also visit European project site.","code":""},{"path":"https://eduaguilera.github.io/whep/index.html","id":"r-package","dir":"","previous_headings":"","what":"R package","title":"Processing Agro-Environmental Data","text":"WHEP project heavily relies data. use R programming language. repository built R package containing functionality think might useful share others part project. also include functions easily downloading data gathered project.","code":""},{"path":"https://eduaguilera.github.io/whep/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Processing Agro-Environmental Data","text":"package constant development. Initial stable releases available CRAN R-universe. can install stable version CRAN: want development version whep, can:","code":"install.packages('whep') # Install from GitHub pak::pak(\"eduaguilera/whep\")  # Install from R-universe install.packages(   \"whep\",   repos = c(\"https://eduaguilera.r-universe.dev\", \"https://cloud.r-project.org\") )"},{"path":"https://eduaguilera.github.io/whep/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Processing Agro-Environmental Data","text":"can read package’s functionalities documentation reference page.","code":""},{"path":"https://eduaguilera.github.io/whep/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Processing Agro-Environmental Data","text":"try follow best coding practices, specifically focused R package creation. process roughly summarized : Use git. Work branch. Track dependencies using renv R package. Add new functionality inside R/ directory functions. Add function documentation. Write clean code. Follow Tidyverse style guide. Write tests code. Create pull requests. Ask review. project starting contributors still learning coding best practices. reason, ’re inexperienced, written small free online book explaining things need previous steps, covering git R package development. can directly access . Anyone welcome contribute, highly recommend go guide become familiar workflow still used .","code":""},{"path":"https://eduaguilera.github.io/whep/reference/add_area_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Get area codes from area names — add_area_code","title":"Get area codes from area names — add_area_code","text":"Add new column existing tibble corresponding code name. codes assumed defined FABIO model.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/add_area_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get area codes from area names — add_area_code","text":"","code":"add_area_code(table, name_column = \"area_name\", code_column = \"area_code\")"},{"path":"https://eduaguilera.github.io/whep/reference/add_area_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get area codes from area names — add_area_code","text":"table table modified new column. name_column name column table containing names. code_column name output column containing codes.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/add_area_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get area codes from area names — add_area_code","text":"tibble contents table extra column named code_column, contains codes. code match, NA included.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/add_area_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get area codes from area names — add_area_code","text":"","code":"table <- tibble::tibble(   area_name = c(\"Armenia\", \"Afghanistan\", \"Dummy Country\", \"Albania\") )  add_area_code(table) #> # A tibble: 4 × 2 #>   area_name     area_code #>   <chr>             <dbl> #> 1 Armenia               1 #> 2 Afghanistan           2 #> 3 Dummy Country        NA #> 4 Albania               3  table |>   dplyr::rename(my_area_name = area_name) |>   add_area_code(name_column = \"my_area_name\") #> # A tibble: 4 × 2 #>   my_area_name  area_code #>   <chr>             <dbl> #> 1 Armenia               1 #> 2 Afghanistan           2 #> 3 Dummy Country        NA #> 4 Albania               3  add_area_code(table, code_column = \"my_custom_code\") #> # A tibble: 4 × 2 #>   area_name     my_custom_code #>   <chr>                  <dbl> #> 1 Armenia                    1 #> 2 Afghanistan                2 #> 3 Dummy Country             NA #> 4 Albania                    3"},{"path":"https://eduaguilera.github.io/whep/reference/add_area_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Get area names from area codes — add_area_name","title":"Get area names from area codes — add_area_name","text":"Add new column existing tibble corresponding name code. codes assumed defined FABIO model, come FAOSTAT internal codes. Equivalences ISO 3166-1 numeric can found Area Codes CSV zip file can downloaded FAOSTAT. TODO: Think , nice use ISO3 codes enough periods.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/add_area_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get area names from area codes — add_area_name","text":"","code":"add_area_name(table, code_column = \"area_code\", name_column = \"area_name\")"},{"path":"https://eduaguilera.github.io/whep/reference/add_area_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get area names from area codes — add_area_name","text":"table table modified new column. code_column name column table containing codes. name_column name output column containing names.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/add_area_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get area names from area codes — add_area_name","text":"tibble contents table extra column named name_column, contains names. name match, NA included.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/add_area_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get area names from area codes — add_area_name","text":"","code":"table <- tibble::tibble(area_code = c(1, 2, 4444, 3))  add_area_name(table) #> # A tibble: 4 × 2 #>   area_code area_name   #>       <dbl> <chr>       #> 1         1 Armenia     #> 2         2 Afghanistan #> 3      4444 NA          #> 4         3 Albania      table |>   dplyr::rename(my_area_code = area_code) |>   add_area_name(code_column = \"my_area_code\") #> # A tibble: 4 × 2 #>   my_area_code area_name   #>          <dbl> <chr>       #> 1            1 Armenia     #> 2            2 Afghanistan #> 3         4444 NA          #> 4            3 Albania      add_area_name(table, name_column = \"my_custom_name\") #> # A tibble: 4 × 2 #>   area_code my_custom_name #>       <dbl> <chr>          #> 1         1 Armenia        #> 2         2 Afghanistan    #> 3      4444 NA             #> 4         3 Albania"},{"path":"https://eduaguilera.github.io/whep/reference/add_item_cbs_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Get commodity balance sheet item codes from item names — add_item_cbs_code","title":"Get commodity balance sheet item codes from item names — add_item_cbs_code","text":"Add new column existing tibble corresponding code commodity balance sheet item name. codes assumed defined FAOSTAT.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/add_item_cbs_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get commodity balance sheet item codes from item names — add_item_cbs_code","text":"","code":"add_item_cbs_code(   table,   name_column = \"item_cbs_name\",   code_column = \"item_cbs_code\" )"},{"path":"https://eduaguilera.github.io/whep/reference/add_item_cbs_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get commodity balance sheet item codes from item names — add_item_cbs_code","text":"table table modified new column. name_column name column table containing names. code_column name output column containing codes.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/add_item_cbs_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get commodity balance sheet item codes from item names — add_item_cbs_code","text":"tibble contents table extra column named code_column, contains codes. code match, NA included.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/add_item_cbs_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get commodity balance sheet item codes from item names — add_item_cbs_code","text":"","code":"table <- tibble::tibble(   item_cbs_name = c(\"Cottonseed\", \"Eggs\", \"Dummy Item\") ) add_item_cbs_code(table) #> # A tibble: 3 × 2 #>   item_cbs_name item_cbs_code #>   <chr>                 <dbl> #> 1 Cottonseed             2559 #> 2 Eggs                   2744 #> 3 Dummy Item               NA  table |>   dplyr::rename(my_item_cbs_name = item_cbs_name) |>   add_item_cbs_code(name_column = \"my_item_cbs_name\") #> # A tibble: 3 × 2 #>   my_item_cbs_name item_cbs_code #>   <chr>                    <dbl> #> 1 Cottonseed                2559 #> 2 Eggs                      2744 #> 3 Dummy Item                  NA  add_item_cbs_code(table, code_column = \"my_custom_code\") #> # A tibble: 3 × 2 #>   item_cbs_name my_custom_code #>   <chr>                  <dbl> #> 1 Cottonseed              2559 #> 2 Eggs                    2744 #> 3 Dummy Item                NA"},{"path":"https://eduaguilera.github.io/whep/reference/add_item_cbs_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Get commodity balance sheet item names from item codes — add_item_cbs_name","title":"Get commodity balance sheet item names from item codes — add_item_cbs_name","text":"Add new column existing tibble corresponding name commodity balance sheet item code. codes assumed defined FAOSTAT.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/add_item_cbs_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get commodity balance sheet item names from item codes — add_item_cbs_name","text":"","code":"add_item_cbs_name(   table,   code_column = \"item_cbs_code\",   name_column = \"item_cbs_name\" )"},{"path":"https://eduaguilera.github.io/whep/reference/add_item_cbs_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get commodity balance sheet item names from item codes — add_item_cbs_name","text":"table table modified new column. code_column name column table containing codes. name_column name output column containing names.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/add_item_cbs_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get commodity balance sheet item names from item codes — add_item_cbs_name","text":"tibble contents table extra column named name_column, contains names. name match, NA included.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/add_item_cbs_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get commodity balance sheet item names from item codes — add_item_cbs_name","text":"","code":"table <- tibble::tibble(item_cbs_code = c(2559, 2744, 9876)) add_item_cbs_name(table) #> # A tibble: 3 × 2 #>   item_cbs_code item_cbs_name #>           <dbl> <chr>         #> 1          2559 Cottonseed    #> 2          2744 Eggs          #> 3          9876 NA             table |>   dplyr::rename(my_item_cbs_code = item_cbs_code) |>   add_item_cbs_name(code_column = \"my_item_cbs_code\") #> # A tibble: 3 × 2 #>   my_item_cbs_code item_cbs_name #>              <dbl> <chr>         #> 1             2559 Cottonseed    #> 2             2744 Eggs          #> 3             9876 NA             add_item_cbs_name(table, name_column = \"my_custom_name\") #> # A tibble: 3 × 2 #>   item_cbs_code my_custom_name #>           <dbl> <chr>          #> 1          2559 Cottonseed     #> 2          2744 Eggs           #> 3          9876 NA"},{"path":"https://eduaguilera.github.io/whep/reference/add_item_prod_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Get production item codes from item names — add_item_prod_code","title":"Get production item codes from item names — add_item_prod_code","text":"Add new column existing tibble corresponding code production item name. codes assumed defined FAOSTAT.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/add_item_prod_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get production item codes from item names — add_item_prod_code","text":"","code":"add_item_prod_code(   table,   name_column = \"item_prod_name\",   code_column = \"item_prod_code\" )"},{"path":"https://eduaguilera.github.io/whep/reference/add_item_prod_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get production item codes from item names — add_item_prod_code","text":"table table modified new column. name_column name column table containing names. code_column name output column containing codes.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/add_item_prod_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get production item codes from item names — add_item_prod_code","text":"tibble contents table extra column named code_column, contains codes. code match, NA included.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/add_item_prod_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get production item codes from item names — add_item_prod_code","text":"","code":"table <- tibble::tibble(   item_prod_name = c(\"Rice\", \"Cabbages\", \"Dummy Item\") ) add_item_prod_code(table) #> # A tibble: 3 × 2 #>   item_prod_name item_prod_code #>   <chr>                   <dbl> #> 1 Rice                       27 #> 2 Cabbages                  358 #> 3 Dummy Item                 NA  table |>   dplyr::rename(my_item_prod_name = item_prod_name) |>   add_item_prod_code(name_column = \"my_item_prod_name\") #> # A tibble: 3 × 2 #>   my_item_prod_name item_prod_code #>   <chr>                      <dbl> #> 1 Rice                          27 #> 2 Cabbages                     358 #> 3 Dummy Item                    NA  add_item_prod_code(table, code_column = \"my_custom_code\") #> # A tibble: 3 × 2 #>   item_prod_name my_custom_code #>   <chr>                   <dbl> #> 1 Rice                       27 #> 2 Cabbages                  358 #> 3 Dummy Item                 NA"},{"path":"https://eduaguilera.github.io/whep/reference/add_item_prod_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Get production item names from item codes — add_item_prod_name","title":"Get production item names from item codes — add_item_prod_name","text":"Add new column existing tibble corresponding name production item code. codes assumed defined FAOSTAT.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/add_item_prod_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get production item names from item codes — add_item_prod_name","text":"","code":"add_item_prod_name(   table,   code_column = \"item_prod_code\",   name_column = \"item_prod_name\" )"},{"path":"https://eduaguilera.github.io/whep/reference/add_item_prod_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get production item names from item codes — add_item_prod_name","text":"table table modified new column. code_column name column table containing codes. name_column name output column containing names.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/add_item_prod_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get production item names from item codes — add_item_prod_name","text":"tibble contents table extra column named name_column, contains names. name match, NA included.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/add_item_prod_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get production item names from item codes — add_item_prod_name","text":"","code":"table <- tibble::tibble(item_prod_code = c(27, 358, 12345)) add_item_prod_name(table) #> # A tibble: 3 × 2 #>   item_prod_code item_prod_name #>            <dbl> <chr>          #> 1             27 Rice           #> 2            358 Cabbages       #> 3          12345 NA              table |>   dplyr::rename(my_item_prod_code = item_prod_code) |>   add_item_prod_name(code_column = \"my_item_prod_code\") #> # A tibble: 3 × 2 #>   my_item_prod_code item_prod_name #>               <dbl> <chr>          #> 1                27 Rice           #> 2               358 Cabbages       #> 3             12345 NA              add_item_prod_name(table, name_column = \"my_custom_name\") #> # A tibble: 3 × 2 #>   item_prod_code my_custom_name #>            <dbl> <chr>          #> 1             27 Rice           #> 2            358 Cabbages       #> 3          12345 NA"},{"path":"https://eduaguilera.github.io/whep/reference/build_supply_use.html","id":null,"dir":"Reference","previous_headings":"","what":"Supply and use tables — build_supply_use","title":"Supply and use tables — build_supply_use","text":"Create table processes, inputs (use) outputs (supply).","code":""},{"path":"https://eduaguilera.github.io/whep/reference/build_supply_use.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Supply and use tables — build_supply_use","text":"","code":"build_supply_use(   cbs_version = NULL,   feed_intake_version = NULL,   primary_prod_version = NULL,   primary_residues_version = NULL,   processing_coefs_version = NULL )"},{"path":"https://eduaguilera.github.io/whep/reference/build_supply_use.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Supply and use tables — build_supply_use","text":"cbs_version File version passed get_wide_cbs() call. feed_intake_version File version passed get_feed_intake() call. primary_prod_version File version passed get_primary_production() call. primary_residues_version File version passed get_primary_residues() call. processing_coefs_version File version passed get_processing_coefs() call.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/build_supply_use.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Supply and use tables — build_supply_use","text":"tibble supply use data processes. contains following columns: year: year recorded event occurred. area_code: code country data . code details see e.g. add_area_name(). proc_group: type process taking place. can one : crop_production: Production crops residues, e.g. rice production, coconut production, etc. husbandry: Animal husbandry, e.g. dairy cattle husbandry, non-dairy cattle husbandry, layers chickens farming, etc. processing: Derived subproducts obtained processing items. items used inputs non-zero processing use commodity balance sheet. See get_wide_cbs() details. process single input. processes like olive oil extraction soyabean oil extraction might make sense. Others like alcohol production need multiple inputs (e.g. multiple crops work), data process like alcohol production rather virtual process like 'Wheat products processing', giving possible outputs. constraint data obtained might improved future. See get_processing_coefs() details. proc_cbs_code: code main item process taking place. Together proc_group, two columns uniquely represent process. main item predictable depending value proc_group: crop_production: code item seed usage () reported commodity balance sheet (see get_wide_cbs() ). example, rice code rice production process cottonseed code cotton production one. husbandry: code farmed animal, e.g. bees beekeeping, non-dairy cattle non-dairy cattle husbandry, etc. processing: code item used input, .e., one processed get derived products. uniquely defines process within group nature data used, can see get_processing_coefs(). code details see e.g. add_item_cbs_name(). item_cbs_code: code item produced used process. Note might value proc_cbs_code, e.g., rice production process row defining amount rice produced amount rice seed input, might also different value, e.g. row defining amount straw residue rice production. code details see e.g. add_item_cbs_name(). type: Can two values: use: given item input process. supply: given item output process. value: Quantity tonnes.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/build_supply_use.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Supply and use tables — build_supply_use","text":"","code":"# Note: These are smaller samples to show outputs, not the real data. # For all data, call the function with default versions (i.e. no arguments). build_supply_use(   cbs_version = \"example\",   feed_intake_version = \"example\",   primary_prod_version = \"example\",   primary_residues_version = \"example\",   processing_coefs_version = \"example\" ) #> ℹ Fetching files for primary_prod... #> ℹ Fetching files for crop_residues... #> ℹ Fetching files for commodity_balance_sheet... #> ℹ Fetching files for feed_intake... #> ℹ Fetching files for processing_coefs... #> # A tibble: 27,914 × 7 #>     year area_code proc_group      proc_cbs_code item_cbs_code type       value #>    <dbl>     <dbl> <chr>                   <dbl>         <dbl> <chr>      <dbl> #>  1  1965        38 crop_production          2645          2645 supply     4460  #>  2  1984        50 crop_production          2625          2625 supply       45  #>  3  2003       131 crop_production          2577          2577 supply 13354800  #>  4  1996       235 crop_production          2517          2517 supply     1600  #>  5  2021        10 crop_production          2511          2511 supply 31922555. #>  6  1970        41 crop_production          2605          2605 supply     7000  #>  7  1997       222 crop_production          2605          2605 supply    12000  #>  8  2003        59 crop_production          2662          2662 supply     2049. #>  9  1966       236 crop_production          2549          2549 supply     5891  #> 10  1976       105 crop_production          2533          2533 supply      800  #> # ℹ 27,904 more rows"},{"path":"https://eduaguilera.github.io/whep/reference/expand_trade_sources.html","id":null,"dir":"Reference","previous_headings":"","what":"Trade data sources — expand_trade_sources","title":"Trade data sources — expand_trade_sources","text":"Create new dataframe row year range one row single year, effectively 'expanding' whole year range.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/expand_trade_sources.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trade data sources — expand_trade_sources","text":"","code":"expand_trade_sources(trade_sources)"},{"path":"https://eduaguilera.github.io/whep/reference/expand_trade_sources.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trade data sources — expand_trade_sources","text":"trade_sources tibble dataframe row contains year range.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/expand_trade_sources.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trade data sources — expand_trade_sources","text":"tibble dataframe row corresponds single year given source.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/expand_trade_sources.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trade data sources — expand_trade_sources","text":"","code":"trade_sources <- tibble::tibble(   Name = c(\"a\", \"b\", \"c\"),   Trade = c(\"t1\", \"t2\", \"t3\"),   Info_Format = c(\"year\", \"partial_series\", \"year\"),   Timeline_Start = c(1, 1, 2),   Timeline_End = c(3, 4, 5),   Timeline_Freq = c(1, 1, 2),   `Imp/Exp` = \"Imp\",   SACO_link = NA, ) expand_trade_sources(trade_sources) #> # A tibble: 9 × 12 #> # Groups:   No [3] #>      No  Year Name  Trade Info_Format  Timeline_Start Timeline_End Timeline_Freq #>   <int> <dbl> <chr> <chr> <chr>                 <dbl>        <dbl>         <dbl> #> 1     1     1 a_1   t1    year                      1            3             1 #> 2     1     2 a_2   t1    year                      1            3             1 #> 3     1     3 a_3   t1    year                      1            3             1 #> 4     2     1 b     t2    partial_ser…              1            4             1 #> 5     2     2 b     t2    partial_ser…              1            4             1 #> 6     2     3 b     t2    partial_ser…              1            4             1 #> 7     2     4 b     t2    partial_ser…              1            4             1 #> 8     3     2 c_2   t3    year                      2            5             2 #> 9     3     4 c_4   t3    year                      2            5             2 #> # ℹ 4 more variables: `Imp/Exp` <chr>, SACO_link <lgl>, ImpExp <chr>, #> #   In_Saco <int>"},{"path":"https://eduaguilera.github.io/whep/reference/get_bilateral_trade.html","id":null,"dir":"Reference","previous_headings":"","what":"Bilateral trade data — get_bilateral_trade","title":"Bilateral trade data — get_bilateral_trade","text":"Reports trade pairs countries given years.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/get_bilateral_trade.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bilateral trade data — get_bilateral_trade","text":"","code":"get_bilateral_trade(trade_version = NULL, cbs_version = NULL)"},{"path":"https://eduaguilera.github.io/whep/reference/get_bilateral_trade.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bilateral trade data — get_bilateral_trade","text":"trade_version File version used bilateral trade input. See whep_inputs version details. cbs_version File version passed get_wide_cbs() call.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/get_bilateral_trade.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bilateral trade data — get_bilateral_trade","text":"tibble reported trade countries. efficient memory usage, tibble exactly tidy format. contains following columns: year: year recorded event occurred. item_cbs_code: FAOSTAT internal code item traded. code details see e.g. add_item_cbs_name(). bilateral_trade: Square matrix NxN dimensions N total number countries considered. matrix row column names exactly equal represent country codes. Row name: code country data . code details see e.g. add_area_name(). Column name: FAOSTAT internal code country importing item. See row name explanation . m matrix, value m[\"\", \"B\"] trade tonnes country \"\" country \"B\", corresponding year item. matrix can considered balanced. means: sum values row \"\", \"\" country, match total exports country \"\" reported commodity balance sheet (considered accurate totals). sum values column \"\", \"\" country, match total imports country \"\" reported commodity balance sheet (considered accurate totals). sums may exactly expected values precision issues /iterative proportional fitting algorithm converging fast enough, relatively close desired totals. step step approach obtain data tries follow FABIO model explained . steps performed separately group year item. FAOSTAT reported bilateral trade, sometimes two values one trade flow: exported amount claimed reporter country import amount claimed partner country. , export data preferred, .e., country \"\" says exported X tonnes country \"B\" country \"B\" claims got Y tonnes country \"\", trust export data X. choice needed exists reported amount sides. Otherwise, single existing report chosen. Complete country data, , add missing combinations country trade NAs, estimated later. matrix form, increase memory usage since build matrix anyway (balancing algorithm), empty parts also take memory. also done total imports/exports commodity balance sheet, directly filled 0s instead. total imports exports commodity balance sheet balanced downscaling largest two match lowest. done following way: total_imports > total_exports: Set import total_exports * import / total_import. total_exports > total_exports: Set export total_exports * export / total_export. missing data matrix must estimated. done like : pair exporter importer j, estimate bilateral trade m[, j] using export shares import shares j commodity balance sheet: est_1 <- exports[] * imports[j] / sum(imports), .e., total exports country spread among countries' import shares. est_2 <- imports[j] * exports[] / sum(exports), .e. total imports country j spread among countries' export shares. est <- (est_1 + est_2) / 2, .e., mean estimates. computations, exports imports original values balanced. estimates data already existed (.e. non-NA) discarded. ones left, row (.e. exporter country), get difference balanced total export sum original non-estimated data. result gap can actually fill estimates, get past reported total export. sum non-discarded estimates larger, must downscaled spread computing gap * non_discarded_estimate / sum(non_discarded_estimates). estimates divided trust factor, sense rely whole value, thinking non-present value might actually specific trade 0, overestimate much. chosen factor 10%, 10% estimate's value actually used fill NA original bilateral trade matrix. matrix balanced, mentioned , using iterative proportional fitting algorithm. target sums rows columns respectively balanced exports imports computed commodity balance sheet. algorithm performed directly using mipfp R package.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/get_bilateral_trade.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bilateral trade data — get_bilateral_trade","text":"","code":"# Note: These are smaller samples to show outputs, not the real data. # For all data, call the function with default versions (i.e. no arguments). get_bilateral_trade(   trade_version = \"example\",   cbs_version = \"example\" ) #> ℹ Fetching files for commodity_balance_sheet... #> ℹ Fetching files for bilateral_trade... #> # A tibble: 72 × 3 #>     year item_cbs_code bilateral_trade   #>    <int>         <dbl> <list>            #>  1  1995          2630 <dbl [187 × 187]> #>  2  2001          2733 <dbl [187 × 187]> #>  3  2005          2671 <dbl [187 × 187]> #>  4  2017          2513 <dbl [187 × 187]> #>  5  2011          2601 <dbl [187 × 187]> #>  6  2011          2655 <dbl [187 × 187]> #>  7  2015          2558 <dbl [187 × 187]> #>  8  2014          2577 <dbl [187 × 187]> #>  9  2000          2625 <dbl [187 × 187]> #> 10  2018          2661 <dbl [187 × 187]> #> # ℹ 62 more rows"},{"path":"https://eduaguilera.github.io/whep/reference/get_faostat_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Scrapes activity_data from FAOSTAT and slightly post-processes it — get_faostat_data","title":"Scrapes activity_data from FAOSTAT and slightly post-processes it — get_faostat_data","text":"Important: Dynamically allows introduction subsets \"...\". Note: overhead individually scraping FAOSTAT code QCL crop data; fine.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/get_faostat_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scrapes activity_data from FAOSTAT and slightly post-processes it — get_faostat_data","text":"","code":"get_faostat_data(activity_data, ...)"},{"path":"https://eduaguilera.github.io/whep/reference/get_faostat_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scrapes activity_data from FAOSTAT and slightly post-processes it — get_faostat_data","text":"activity_data activity data required FAOSTAT; needs one c('livestock','crop_area','crop_yield','crop_production'). ... can whichever column name get_faostat_bulk, particularly year, area ISO3_CODE.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/get_faostat_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scrapes activity_data from FAOSTAT and slightly post-processes it — get_faostat_data","text":"data.frame FAOSTAT activity_data; default years countries.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/get_faostat_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scrapes activity_data from FAOSTAT and slightly post-processes it — get_faostat_data","text":"","code":"# \\donttest{ get_faostat_data(\"livestock\", year = 2010, area = \"Portugal\") #> Loading required package: FAOSTAT #> Warning: Duplicated ISO3_CODE matched, double check the data #> Warning: Certain ISO3_CODE were not matched. #> Warning: Please check the correct China has been specified. #> # A tibble: 18 × 7 #>    area     item               element  year     value unit  ISO3_CODE #>    <chr>    <chr>              <chr>   <int>     <dbl> <chr> <chr>     #>  1 Portugal Asses              stocks   2010    13538. An    PRT       #>  2 Portugal Cattle, dairy      stocks   2010   243000  An    PRT       #>  3 Portugal Cattle, non-dairy  stocks   2010  1204000  An    PRT       #>  4 Portugal Chickens, broilers stocks   2010 25733000  An    PRT       #>  5 Portugal Chickens, layers   stocks   2010  6500000  An    PRT       #>  6 Portugal Goats              stocks   2010   419000  An    PRT       #>  7 Portugal Horses             stocks   2010    97000  An    PRT       #>  8 Portugal Mules and hinnies  stocks   2010     6273. An    PRT       #>  9 Portugal Sheep              stocks   2010  2226000  An    PRT       #> 10 Portugal Swine, breeding    stocks   2010   191700  An    PRT       #> 11 Portugal Swine, market      stocks   2010  1725300  An    PRT       #> 12 Portugal Turkeys            stocks   2010  2231878. An    PRT       #> 13 Portugal Cattle             stocks   2010  1447000  An    PRT       #> 14 Portugal Chickens           stocks   2010 32233000  An    PRT       #> 15 Portugal Mules and Asses    stocks   2010    19812. An    PRT       #> 16 Portugal Poultry Birds      stocks   2010 34464878. An    PRT       #> 17 Portugal Sheep and Goats    stocks   2010  2645000  An    PRT       #> 18 Portugal Swine              stocks   2010  1917000  An    PRT       # }"},{"path":"https://eduaguilera.github.io/whep/reference/get_feed_intake.html","id":null,"dir":"Reference","previous_headings":"","what":"Livestock feed intake — get_feed_intake","title":"Livestock feed intake — get_feed_intake","text":"Get amount items used feeding livestock.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/get_feed_intake.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Livestock feed intake — get_feed_intake","text":"","code":"get_feed_intake(version = NULL)"},{"path":"https://eduaguilera.github.io/whep/reference/get_feed_intake.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Livestock feed intake — get_feed_intake","text":"version File version use input. See whep_inputs details.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/get_feed_intake.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Livestock feed intake — get_feed_intake","text":"tibble feed intake data. contains following columns: year: year recorded event occurred. area_code: code country data . code details see e.g. add_area_name(). live_anim_code: Commodity balance sheet code type livestock fed. code details see e.g. add_item_cbs_name(). item_cbs_code: code item used feeding animal. code details see e.g. add_item_cbs_name(). feed_type: type item fed. can one : animals: Livestock product, e.g. Bovine Meat, Butter, Ghee, etc. crops: Crop product, e.g. Vegetables, , Oats, etc. residues: Crop residue, e.g. Straw, Fodder legumes, etc. grass: Grass, e.g. Grassland, Temporary grassland, etc. scavenging: residues. Single Scavenging item. supply: computed amount tonnes item fed animal, sharing total item feed use Commodity Balance Sheet among livestock. intake: actual amount tonnes animal needs, can less theoretical used amount supply. intake_dry_matter: amount specified intake considering dry matter, less intake. loss: amount used feed. supply - intake. loss_share: percent lost. loss / supply.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/get_feed_intake.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Livestock feed intake — get_feed_intake","text":"","code":"# Note: These are smaller samples to show outputs, not the real data. # For all data, call the function with default version (i.e. no arguments). get_feed_intake(version = \"example\") #> ℹ Fetching files for feed_intake... #> # A tibble: 10,000 × 10 #>     year area_code live_anim_code item_cbs_code feed_type   supply   intake #>    <dbl>     <dbl>          <dbl>         <dbl> <chr>        <dbl>    <dbl> #>  1  1983        15           1096          2102 crops         21.1     18.9 #>  2  1985       251           1016          3000 grass     269616.  269616.  #>  3  2021       222           1052          2781 animals       35.9     32.3 #>  4  2017       105           1079          2598 crops       1727.    1554.  #>  5  2000        39           1053          2106 residues   12662.   11396.  #>  6  1968        84           1016          2002 residues    3015.    2714.  #>  7  2008       170           1053          2595 crops       4294.    3864.  #>  8  2015         3            976          2101 crops         40.1     36.1 #>  9  2002        79           1052          2558 crops       3788.    3409.  #> 10  2014        41           1068          2518 crops     148505.  133654.  #> # ℹ 9,990 more rows #> # ℹ 3 more variables: intake_dry_matter <dbl>, loss <dbl>, loss_share <dbl>"},{"path":"https://eduaguilera.github.io/whep/reference/get_primary_production.html","id":null,"dir":"Reference","previous_headings":"","what":"Primary items production — get_primary_production","title":"Primary items production — get_primary_production","text":"Get amount crops, livestock livestock products.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/get_primary_production.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Primary items production — get_primary_production","text":"","code":"get_primary_production(version = NULL)"},{"path":"https://eduaguilera.github.io/whep/reference/get_primary_production.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Primary items production — get_primary_production","text":"version File version use input. See whep_inputs details.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/get_primary_production.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Primary items production — get_primary_production","text":"tibble item production data. contains following columns: year: year recorded event occurred. area_code: code country data . code details see e.g. add_area_name(). item_prod_code: FAOSTAT internal code produced item. item_cbs_code: FAOSTAT internal code commodity balance sheet item. commodity balance sheet contains aggregated version production items. field code corresponding aggregated item. live_anim_code: Commodity balance sheet code type livestock produces livestock product. can : NA: entry livestock product. Non-NA: code livestock type. name can also retrieved using add_item_cbs_name(). unit: Measurement unit data. , keep mind three groups items: crops (e.g. Apples products, Beans...), livestock (e.g. Cattle, dairy, Goats...) livestock products (e.g. Poultry Meat, Offals, Edible...). unit can one : tonnes: Available crops livestock products. ha: Hectares, available crops. t_ha: Tonnes per hectare, available crops. heads: Number animals, available livestock. LU: Standard Livestock Unit measure, available livestock. t_head: tonnes per head, available livestock products. t_LU: tonnes per Livestock Unit, available livestock products. value: amount item produced, measured unit.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/get_primary_production.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Primary items production — get_primary_production","text":"","code":"# Note: These are smaller samples to show outputs, not the real data. # For all data, call the function with default version (i.e. no arguments). get_primary_production(version = \"example\") #> ℹ Fetching files for primary_prod... #> # A tibble: 10,000 × 7 #>     year area_code item_prod_code item_cbs_code live_anim_code unit       value #>    <dbl>     <dbl>          <dbl>         <dbl>          <dbl> <chr>      <dbl> #>  1  1965        38            720          2645             NA tonnes 4460      #>  2  2019       213           1062          2744           1052 t_LU    581.     #>  3  1999        39            826          2671             NA t_ha      1.45   #>  4  1968       114            772           772             NA t_ha      1      #>  5  2001       236            406          2605             NA ha     1591      #>  6  1984        50            603          2625             NA tonnes   45      #>  7  1981       136            567          2605             NA ha      720      #>  8  2005        40            547          2625             NA ha     4532      #>  9  2009       215            977          2732            976 t_LU      0.0321 #> 10  1996       158            191          2549             NA ha      270      #> # ℹ 9,990 more rows"},{"path":"https://eduaguilera.github.io/whep/reference/get_primary_residues.html","id":null,"dir":"Reference","previous_headings":"","what":"Crop residue items — get_primary_residues","title":"Crop residue items — get_primary_residues","text":"Get type amount residue produced crop production item.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/get_primary_residues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crop residue items — get_primary_residues","text":"","code":"get_primary_residues(version = NULL)"},{"path":"https://eduaguilera.github.io/whep/reference/get_primary_residues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crop residue items — get_primary_residues","text":"version File version use input. See whep_inputs details.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/get_primary_residues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crop residue items — get_primary_residues","text":"tibble crop residue data. contains following columns: year: year recorded event occurred. area_code: code country data . code details see e.g. add_area_name(). item_cbs_code_crop: FAOSTAT internal code commodity balance sheet item. crop generating residue. item_cbs_code_residue: FAOSTAT internal code commodity balance sheet item. obtained residue. commodity balance sheet, can three different items right now: 2105: Straw 2106: crop residues 2107: Firewood actually FAOSTAT defined items, custom defined us. necessary, FAOSTAT codes extended needs. value: amount residue produced, measured tonnes.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/get_primary_residues.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crop residue items — get_primary_residues","text":"","code":"# Note: These are smaller samples to show outputs, not the real data. # For all data, call the function with default version (i.e. no arguments). get_primary_residues(version = \"example\") #> ℹ Fetching files for crop_residues... #> # A tibble: 4,504 × 5 #>     year area_code item_cbs_code_crop item_cbs_code_residue    value #>    <dbl>     <dbl>              <dbl>                 <dbl>    <dbl> #>  1  2003        53               2570                  2107  19903.  #>  2  2008        NA               2551                  2107 222849.  #>  3  2001        NA               2605                  2106   2309.  #>  4  1981       136               2605                  2106    421.  #>  5  2019       121               2605                  2106  19703.  #>  6  2005        40               2625                  2107   5904.  #>  7  1978       166               2605                  2106    828.  #>  8  1996       158               2549                  2105     92.9 #>  9  1976        10               2612                  2107   5401.  #> 10  2012         3               2605                  2106  12086.  #> # ℹ 4,494 more rows"},{"path":"https://eduaguilera.github.io/whep/reference/get_processing_coefs.html","id":null,"dir":"Reference","previous_headings":"","what":"Processed products share factors — get_processing_coefs","title":"Processed products share factors — get_processing_coefs","text":"Reports quantities commodity balance sheet items used processing quantities corresponding processed output items.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/get_processing_coefs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Processed products share factors — get_processing_coefs","text":"","code":"get_processing_coefs(version = NULL)"},{"path":"https://eduaguilera.github.io/whep/reference/get_processing_coefs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Processed products share factors — get_processing_coefs","text":"version File version use input. See whep_inputs details.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/get_processing_coefs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Processed products share factors — get_processing_coefs","text":"tibble quantities processed product. contains following columns: year: year recorded event occurred. area_code: code country data . code details see e.g. add_area_name(). item_cbs_code_to_process: FAOSTAT internal code one items processed give subproduct items. code details see e.g. add_item_cbs_name(). value_to_process: tonnes item processed. matches amount found processing column data obtained get_wide_cbs(). item_cbs_code_processed: FAOSTAT internal code one subproduct items obtained processing. code details see e.g. add_item_cbs_name(). initial_conversion_factor: estimate number tonnes item_cbs_code_processed obtained tonne item_cbs_code_to_process. used compute final_conversion_factor, leaves everything balanced. TODO: explain computed. initial_value_processed: first estimate number tonnes item_cbs_code_processed obtained item_cbs_code_to_process. computed value_to_process * initial_conversion_factor. conversion_factor_scaling: computed scaling needed adapt initial_conversion_factor get final balanced total subproduct quantities. TODO: explain computed. final_conversion_factor: final used estimate number tonnes item_cbs_code_processed obtained tonne item_cbs_code_to_process. computed initial_conversion_factor * conversion_factor_scaling. final_value_processed: final estimate number tonnes item_cbs_code_processed obtained item_cbs_code_to_process. computed initial_value_processed * final_conversion_factor. final data obtained, quantities final_value_processed balanced following sense: total sum final_value_processed unique tuple (year, area_code, item_cbs_code_processed) exactly quantity reported year, country item_cbs_code_processed item production column obtained get_wide_cbs(). primary products, amount 'production' actually amount subproduct obtained. TODO: Fix data hold.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/get_processing_coefs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Processed products share factors — get_processing_coefs","text":"","code":"# Note: These are smaller samples to show outputs, not the real data. # For all data, call the function with default version (i.e. no arguments). get_processing_coefs(version = \"example\") #> ℹ Fetching files for processing_coefs... #> # A tibble: 5,000 × 10 #>     year area_code item_cbs_code_to_process value_to_process #>    <dbl>     <dbl>                    <dbl>            <dbl> #>  1  2012        38                     2561           1097.  #>  2  2009        28                     2537         372812.  #>  3  1992       110                     2537        3581000   #>  4  1965        51                     2555          25085   #>  5  2008        52                     2537          94467.  #>  6  2000       166                     2544          25108   #>  7  1962       156                     2513          39031.  #>  8  2010        28                     2537         374089.  #>  9  1966       121                     2557             23.8 #> 10  2015       231                     2559        1142825.  #> # ℹ 4,990 more rows #> # ℹ 6 more variables: item_cbs_code_processed <dbl>, #> #   initial_conversion_factor <dbl>, initial_value_processed <dbl>, #> #   conversion_factor_scaling <dbl>, final_conversion_factor <dbl>, #> #   final_value_processed <dbl>"},{"path":"https://eduaguilera.github.io/whep/reference/get_wide_cbs.html","id":null,"dir":"Reference","previous_headings":"","what":"Commodity balance sheet data — get_wide_cbs","title":"Commodity balance sheet data — get_wide_cbs","text":"States supply use parts commodity balance sheet (CBS) item.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/get_wide_cbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Commodity balance sheet data — get_wide_cbs","text":"","code":"get_wide_cbs(version = NULL)"},{"path":"https://eduaguilera.github.io/whep/reference/get_wide_cbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Commodity balance sheet data — get_wide_cbs","text":"version File version use input. See whep_inputs details.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/get_wide_cbs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Commodity balance sheet data — get_wide_cbs","text":"tibble commodity balance sheet data wide format. contains following columns: year: year recorded event occurred. area_code: code country data . code details see e.g. add_area_name(). item_cbs_code: FAOSTAT internal code item. code details see e.g. add_item_cbs_name(). columns quantities (measured tonnes), total supply total use balanced. supply: production: Produced locally. import: Obtained importing countries. stock_retrieval: Available net stock previous years. ease, one stock column included supply. value positive, stock quantity available supply. Otherwise, means larger quantity stored later years used supply, deduce total supply. Since case negative, total supply still computed sum . use: food: Food humans. feed: Food animals. export: Released export countries. seed: Intended new production. processing: product used obtain subproducts. other_uses: use included ones. additional column domestic_supply computed total use excluding export.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/get_wide_cbs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Commodity balance sheet data — get_wide_cbs","text":"","code":"# Note: These are smaller samples to show outputs, not the real data. # For all data, call the function with default version (i.e. no arguments). get_wide_cbs(version = \"example\") #> ℹ Fetching files for commodity_balance_sheet... #> # A tibble: 9,959 × 13 #>     year area_code item_cbs_code processing production other_uses  feed  seed #>    <int>     <int>         <dbl>      <dbl>      <dbl>      <dbl> <dbl> <dbl> #>  1  1968       216          2775          0         0           0     0     0 #>  2  2011        57          2731          0    297800           0     0     0 #>  3  1962        51          2590          0         0           0     0     0 #>  4  1973        48          2737          0      6656.          0     0     0 #>  5  1987       171          2106          0         0           0     0     0 #>  6  2012       129          2105          0         0           0     0     0 #>  7  1980       162          2737          0         0           0     0     0 #>  8  2001        97          2781          0         0           0     0     0 #>  9  2021       250          2613          0         0           0     0     0 #> 10  1968       202          2807          0         0           0     0     0 #> # ℹ 9,949 more rows #> # ℹ 5 more variables: import <dbl>, domestic_supply <dbl>, food <dbl>, #> #   export <dbl>, stock_retrieval <dbl>"},{"path":"https://eduaguilera.github.io/whep/reference/items_cbs.html","id":null,"dir":"Reference","previous_headings":"","what":"Commodity balance sheet items — items_cbs","title":"Commodity balance sheet items — items_cbs","text":"Defines name/code correspondences commodity balance sheet (CBS) items.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/items_cbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Commodity balance sheet items — items_cbs","text":"","code":"items_cbs"},{"path":"https://eduaguilera.github.io/whep/reference/items_cbs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Commodity balance sheet items — items_cbs","text":"tibble row corresponds one CBS item. contains following columns: item_cbs_code: numeric code used refer CBS item. item_cbs_name: natural language name item. item_type: ad-hoc grouping items. work progress evolving depending needs, now two possible values: livestock: CBS item represents live animal. : previous groups.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/items_cbs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Commodity balance sheet items — items_cbs","text":"Inspired FAOSTAT data.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/items_prod.html","id":null,"dir":"Reference","previous_headings":"","what":"Primary production items — items_prod","title":"Primary production items — items_prod","text":"Defines name/code correspondences production items.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/items_prod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Primary production items — items_prod","text":"","code":"items_prod"},{"path":"https://eduaguilera.github.io/whep/reference/items_prod.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Primary production items — items_prod","text":"tibble row corresponds one production item. contains following columns: item_prod_code: numeric code used refer item. item_prod_name: natural language name item. item_type: ad-hoc grouping items. work progress evolving depending needs, now two possible values: crop_product: CBS item represents crop product. : previous groups.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/items_prod.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Primary production items — items_prod","text":"Inspired FAOSTAT data.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/linear_fill.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill gaps by linear interpolation, or carrying forward or backward. — linear_fill","title":"Fill gaps by linear interpolation, or carrying forward or backward. — linear_fill","text":"Fills gaps (NA values) time-dependent variable linear interpolation two points, carrying forward backwards last initial values, respectively. also creates new variable indicating source filled values.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/linear_fill.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill gaps by linear interpolation, or carrying forward or backward. — linear_fill","text":"","code":"linear_fill(   df,   var,   time_index,   interpolate = TRUE,   fill_forward = TRUE,   fill_backward = TRUE,   .by = NULL )"},{"path":"https://eduaguilera.github.io/whep/reference/linear_fill.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill gaps by linear interpolation, or carrying forward or backward. — linear_fill","text":"df tibble data frame containing one observation per row. var variable df containing gaps filled. time_index time index variable (usually year). interpolate Logical. TRUE (default), performs linear interpolation. fill_forward Logical. TRUE (default), carries last value forward. fill_backward Logical. TRUE (default), carries first value backward. .character vector grouping variables (optional).","code":""},{"path":"https://eduaguilera.github.io/whep/reference/linear_fill.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fill gaps by linear interpolation, or carrying forward or backward. — linear_fill","text":"tibble data frame (ungrouped) gaps var filled, new \"source\" variable created indicating value original , case estimated, gapfilling method used.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/linear_fill.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill gaps by linear interpolation, or carrying forward or backward. — linear_fill","text":"","code":"sample_tibble <- tibble::tibble(   category = c(\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\"),   year = c(     \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\",     \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"   ),   value = c(NA, 3, NA, NA, 0, NA, 1, NA, NA, NA, 5, NA), ) linear_fill(sample_tibble, value, year, .by = c(\"category\")) #> # A tibble: 12 × 4 #>    category year  value source_value                  #>    <chr>    <chr> <dbl> <chr>                         #>  1 a        2015      3 First value carried backwards #>  2 a        2016      3 Original                      #>  3 a        2017      2 Linear interpolation          #>  4 a        2018      1 Linear interpolation          #>  5 a        2019      0 Original                      #>  6 a        2020      0 Last value carried forward    #>  7 b        2015      1 Original                      #>  8 b        2016      2 Linear interpolation          #>  9 b        2017      3 Linear interpolation          #> 10 b        2018      4 Linear interpolation          #> 11 b        2019      5 Original                      #> 12 b        2020      5 Last value carried forward    linear_fill(   sample_tibble,   value,   year,   interpolate = FALSE,   .by = c(\"category\"), ) #> # A tibble: 12 × 4 #>    category year  value source_value                  #>    <chr>    <chr> <dbl> <chr>                         #>  1 a        2015      3 First value carried backwards #>  2 a        2016      3 Original                      #>  3 a        2017     NA Gap not filled                #>  4 a        2018     NA Gap not filled                #>  5 a        2019      0 Original                      #>  6 a        2020      0 Last value carried forward    #>  7 b        2015      1 Original                      #>  8 b        2016     NA Gap not filled                #>  9 b        2017     NA Gap not filled                #> 10 b        2018     NA Gap not filled                #> 11 b        2019      5 Original                      #> 12 b        2020      5 Last value carried forward"},{"path":"https://eduaguilera.github.io/whep/reference/polities.html","id":null,"dir":"Reference","previous_headings":"","what":"Polities — polities","title":"Polities — polities","text":"Defines name/code correspondences polities (political entities).","code":""},{"path":"https://eduaguilera.github.io/whep/reference/polities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Polities — polities","text":"","code":"polities"},{"path":"https://eduaguilera.github.io/whep/reference/polities.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Polities — polities","text":"tibble row corresponds one polity. contains following columns: TODO: polities Pull Request, coming soon","code":""},{"path":"https://eduaguilera.github.io/whep/reference/proxy_fill.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill gaps using a proxy variable — proxy_fill","title":"Fill gaps using a proxy variable — proxy_fill","text":"Fills gaps variable based changes proxy variable, using ratios filled variable proxy variable, labels output accordingly.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/proxy_fill.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill gaps using a proxy variable — proxy_fill","text":"","code":"proxy_fill(df, var, proxy_var, time_index, ...)"},{"path":"https://eduaguilera.github.io/whep/reference/proxy_fill.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill gaps using a proxy variable — proxy_fill","text":"df tibble data frame containing one observation per row. var variable df containing gaps filled. proxy_var variable used proxy. time_index time index variable (usually year). ... Optionally, additional arguments passed linear_fill() ratios. See function know accepted arguments.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/proxy_fill.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fill gaps using a proxy variable — proxy_fill","text":"tibble dataframe (ungrouped) gaps var filled, new proxy_ratio variable created, new \"source\" variable created indicating value original , case estimated, gapfilling method used.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/proxy_fill.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill gaps using a proxy variable — proxy_fill","text":"","code":"sample_tibble <- tibble::tibble(   category = c(\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\"),   year = c(     \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\",     \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"   ),   value = c(NA, 3, NA, NA, 0, NA, 1, NA, NA, NA, 5, NA),   proxy_variable = c(1, 2, 2, 2, 2, 2, 1, 2, 3, 4, 5, 6) ) proxy_fill(sample_tibble, value, proxy_variable, year, .by = c(\"category\")) #> # A tibble: 12 × 7 #>    category year  value proxy_variable proxy_ratio source_proxy_ratio            #>    <chr>    <chr> <dbl>          <dbl>       <dbl> <chr>                         #>  1 a        2015    1.5              1         1.5 First value carried backwards #>  2 a        2016    3                2         1.5 Original                      #>  3 a        2017    2                2         1   Linear interpolation          #>  4 a        2018    1                2         0.5 Linear interpolation          #>  5 a        2019    0                2         0   Original                      #>  6 a        2020    0                2         0   Last value carried forward    #>  7 b        2015    1                1         1   Original                      #>  8 b        2016    2                2         1   Linear interpolation          #>  9 b        2017    3                3         1   Linear interpolation          #> 10 b        2018    4                4         1   Linear interpolation          #> 11 b        2019    5                5         1   Original                      #> 12 b        2020    6                6         1   Last value carried forward    #> # ℹ 1 more variable: source_value <chr>"},{"path":"https://eduaguilera.github.io/whep/reference/sum_fill.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill gaps summing the previous value of a variable to the value of another variable. — sum_fill","title":"Fill gaps summing the previous value of a variable to the value of another variable. — sum_fill","text":"Fills gaps variable sum previous value value another variable. gap multiple observations, values accumulated along series. gap start series, can either remain unfilled assume invisible 0 value first observation start filling cumulative sum.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/sum_fill.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill gaps summing the previous value of a variable to the value of another variable. — sum_fill","text":"","code":"sum_fill(df, var, change_var, start_with_zero = TRUE, .by = NULL)"},{"path":"https://eduaguilera.github.io/whep/reference/sum_fill.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill gaps summing the previous value of a variable to the value of another variable. — sum_fill","text":"df tibble data frame containing one observation per row. var variable df containing gaps filled. change_var variable whose values used fill gaps. start_with_zero Logical. TRUE, assumes invisible 0 value first observation fills cumulative sum starting first change_var value. FALSE (default), starting NA values remain unfilled. .character vector grouping variables (optional).","code":""},{"path":"https://eduaguilera.github.io/whep/reference/sum_fill.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fill gaps summing the previous value of a variable to the value of another variable. — sum_fill","text":"tibble dataframe (ungrouped) gaps var filled, new \"source\" variable created indicating value original , case estimated, gapfilling method used.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/sum_fill.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill gaps summing the previous value of a variable to the value of another variable. — sum_fill","text":"","code":"sample_tibble <- tibble::tibble(   category = c(\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\"),   year = c(     \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\",     \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"   ),   value = c(NA, 3, NA, NA, 0, NA, 1, NA, NA, NA, 5, NA),   change_variable = c(1, 2, 3, 4, 1, 1, 0, 0, 0, 0, 0, 1) ) sum_fill(   sample_tibble,   value,   change_variable,   start_with_zero = FALSE,   .by = c(\"category\") ) #> # A tibble: 12 × 5 #>    category year  value change_variable source_value    #>    <chr>    <chr> <dbl>           <dbl> <chr>           #>  1 a        2015     NA               1 NA              #>  2 a        2016      3               2 Original        #>  3 a        2017      6               3 Filled with sum #>  4 a        2018     10               4 Filled with sum #>  5 a        2019      0               1 Original        #>  6 a        2020      1               1 Filled with sum #>  7 b        2015      1               0 Original        #>  8 b        2016      1               0 Filled with sum #>  9 b        2017      1               0 Filled with sum #> 10 b        2018      1               0 Filled with sum #> 11 b        2019      5               0 Original        #> 12 b        2020      6               1 Filled with sum sum_fill(   sample_tibble,   value,   change_variable,   start_with_zero = TRUE,   .by = c(\"category\") ) #> # A tibble: 12 × 5 #>    category year  value change_variable source_value    #>    <chr>    <chr> <dbl>           <dbl> <chr>           #>  1 a        2015      1               1 Filled with sum #>  2 a        2016      3               2 Original        #>  3 a        2017      6               3 Filled with sum #>  4 a        2018     10               4 Filled with sum #>  5 a        2019      0               1 Original        #>  6 a        2020      1               1 Filled with sum #>  7 b        2015      1               0 Original        #>  8 b        2016      1               0 Filled with sum #>  9 b        2017      1               0 Filled with sum #> 10 b        2018      1               0 Filled with sum #> 11 b        2019      5               0 Original        #> 12 b        2020      6               1 Filled with sum"},{"path":"https://eduaguilera.github.io/whep/reference/whep-package.html","id":null,"dir":"Reference","previous_headings":"","what":"whep: Processing Agro-Environmental Data — whep-package","title":"whep: Processing Agro-Environmental Data — whep-package","text":"set tools processing analyzing data developed context \"Eaten Planet\" (WHEP) project, funded European Research Council (ERC). details multi-regional input–output model \"Food Agriculture Biomass Input–Output\" (FABIO) see Bruckner et al. (2019) doi:10.1021/acs.est.9b03554 .","code":""},{"path":[]},{"path":"https://eduaguilera.github.io/whep/reference/whep-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"whep: Processing Agro-Environmental Data — whep-package","text":"Maintainer: Catalin Covaci catalin.covaci@csic.es (ORCID) Authors: Eduardo Aguilera eduardo.aguilera@csic.es (ORCID) [copyright holder] contributors: João Serra jserra@agro.au.dk (ORCID) [contributor] European Research Council [funder]","code":""},{"path":"https://eduaguilera.github.io/whep/reference/whep_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"External inputs — whep_inputs","title":"External inputs — whep_inputs","text":"information needed accessing external datasets used inputs modeling.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/whep_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"External inputs — whep_inputs","text":"","code":"whep_inputs"},{"path":"https://eduaguilera.github.io/whep/reference/whep_inputs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"External inputs — whep_inputs","text":"tibble row corresponds one external input dataset. contains following columns: alias: internal name used refer dataset, expected name trying get dataset whep_read_file(). board_url: public static URL data found, following concept board pins package, use storing input datasets. version: specific version dataset, defined pins package. version string similar \"20250714T123343Z-114b5\". version one used default version specified calling whep_read_file(). want use different one, can find available versions file using whep_list_file_versions().","code":""},{"path":"https://eduaguilera.github.io/whep/reference/whep_inputs.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"External inputs — whep_inputs","text":"Created package authors.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/whep_list_file_versions.html","id":null,"dir":"Reference","previous_headings":"","what":"Input file versions — whep_list_file_versions","title":"Input file versions — whep_list_file_versions","text":"Lists existing versions input file whep_inputs.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/whep_list_file_versions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Input file versions — whep_list_file_versions","text":"","code":"whep_list_file_versions(file_alias)"},{"path":"https://eduaguilera.github.io/whep/reference/whep_list_file_versions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Input file versions — whep_list_file_versions","text":"file_alias Internal name requested file. can find possible values whep_inputs dataset.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/whep_list_file_versions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Input file versions — whep_list_file_versions","text":"tibble row version. details format, see pins::pin_versions().","code":""},{"path":"https://eduaguilera.github.io/whep/reference/whep_list_file_versions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Input file versions — whep_list_file_versions","text":"","code":"whep_list_file_versions(\"read_example\") #> # A tibble: 3 × 3 #>   version                created             hash  #>   <chr>                  <dttm>              <chr> #> 1 20250721T152646Z-ce61b 2025-07-21 15:26:46 ce61b #> 2 20250721T152756Z-f00da 2025-07-21 15:27:56 f00da #> 3 20250721T152854Z-7cc8f 2025-07-21 15:28:54 7cc8f"},{"path":"https://eduaguilera.github.io/whep/reference/whep_read_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Download, cache and read files — whep_read_file","title":"Download, cache and read files — whep_read_file","text":"Used fetch input files needed package's functions built external sources large include directly. public function transparency purposes, users can inspect original inputs package directly processed . requested file exist locally, downloaded public link cached reading . implemented using pins package. supports multiple file formats file versioning.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/whep_read_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download, cache and read files — whep_read_file","text":"","code":"whep_read_file(file_alias, type = \"parquet\", version = NULL)"},{"path":"https://eduaguilera.github.io/whep/reference/whep_read_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download, cache and read files — whep_read_file","text":"file_alias Internal name requested file. can find possible values alias column whep_inputs dataset. type extension file must read. Possible values: parquet: default value code efficiency reasons. csv: Mainly available want human-readable option. parquet version available, useless function already returns dataset R object, origin irrelevant, parquet read faster. Saving file formats transparency accessibility purposes, e.g., share data non-programmers can easily import CSV spreadsheet. likely never set option manually unless reason file supplied e.g. parquet format another one. version version file must read. Possible values: NULL: default value. frozen version chosen make code reproducible. release frozen versions. version string can found whep_inputs version column. \"latest\": overrides frozen version instead fetches latest one available. might might match frozen version. : specific version can also used. details read version column information whep_inputs.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/whep_read_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download, cache and read files — whep_read_file","text":"tibble dataset. information dataset can found code used input processing.","code":""},{"path":"https://eduaguilera.github.io/whep/reference/whep_read_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download, cache and read files — whep_read_file","text":"","code":"whep_read_file(\"read_example\") #> ℹ Fetching files for read_example... #> # A tibble: 1 × 2 #>   col_1                col_2          #>   <chr>                <chr>          #> 1 I'm a sample dataset second version whep_read_file(\"read_example\", type = \"parquet\", version = \"latest\") #> ℹ Fetching files for read_example... #> # A tibble: 1 × 2 #>   col_1                col_2         #>   <chr>                <chr>         #> 1 I'm a sample dataset third version whep_read_file(   \"read_example\",   type = \"csv\",   version = \"20250721T152646Z-ce61b\" ) #> ℹ Fetching files for read_example... #> # A tibble: 1 × 2 #>   col_1                col_2         #>   <chr>                <chr>         #> 1 I'm a sample dataset first version"},{"path":[]},{"path":"https://eduaguilera.github.io/whep/news/index.html","id":"whep-020","dir":"Changelog","previous_headings":"","what":"whep 0.2.0","title":"whep 0.2.0","text":"CRAN release: 2025-10-15 Add gapfilling functions linear_fill(), proxy_fill(), sum_fill() (@eduaguilera, #11). Now examples can’t fail unavailable Internet resources (#58).","code":""},{"path":"https://eduaguilera.github.io/whep/news/index.html","id":"whep-010","dir":"Changelog","previous_headings":"","what":"whep 0.1.0","title":"whep 0.1.0","text":"CRAN release: 2025-07-25 Build supply-use tables (build_supply_use()) (#17). Balance bilateral trade (get_bilateral_trade()) (#8, #9). Create article Follow workflow new contributors (#1, #2, #29). Download large datasets whep_read_file() pins package (#29, #43). Get raw FAOSTAT data get_faostat_data() wrapper (#3). Initial CRAN submission.","code":""}]
